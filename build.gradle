plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    alias(libs.plugins.neo.moddev)
    alias(libs.plugins.spotless)
}

Provider<String> modId = libs.versions.mod.id

tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

java {
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

repositories {
    mavenLocal()
    maven {
        url = "https://www.cursemaven.com"
        content { includeGroup "curse.maven" }
    }
    maven {
        url = 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        content { includeGroup("software.bernie.geckolib") }
    }

    maven { url = "https://api.modrinth.com/maven" }
    maven { url = "https://maven.architectury.dev/" }
    maven { url = "https://maven.blamejared.com/" }
    maven { url = "https://maven.kosmx.dev/" }
    maven { url = "https://maven.minecraftforge.net/" }
    maven { url = "https://maven.su5ed.dev/releases" }
    maven { url = "https://maven.wispforest.io/releases/" }
    maven { url = "https://modmaven.dev" }
    maven { url = "https://repo.spongepowered.org/repository/maven-public/" }
    maven { url = "https://thedarkcolour.github.io/KotlinForForge/" }
}

base {
    archivesName = mod_id
}

// Mojang ships Java 21 to end users starting in 1.20.5, so mods should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    // Specify the version of NeoForge to use.
    version = libs.versions.neo.version.get()

    parchment {
        mappingsVersion = libs.versions.parchment.map.get()
        minecraftVersion = libs.versions.parchment.mc.get()
    }

    // This line is optional. Access Transformers are automatically detected
    // accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            client()

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty('neoforge.enabledGameTestNamespaces', modId.get())
        }

        server {
            server()
            programArgument('--nogui')
            systemProperty('neoforge.enabledGameTestNamespaces', modId.get())
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            type = "gameTestServer"
            systemProperty('neoforge.enabledGameTestNamespaces', modId.get())
        }

        data {
            data()

            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // gameDirectory = project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll('--mod', modId.get(), '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath())
        }

        // applies to all the run configs above
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty('forge.logging.markers', 'REGISTRIES')

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // mostly optional in a single mod project
        // but multi mod projects should define one per mod
        create(modId.get()) {
            sourceSet(sourceSets.main)
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir('src/generated/resources') }

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    implementation(libs.bundles.mods.impl)

    compileOnly(libs.bundles.mods.compile)

    runtimeOnly(libs.bundles.mods.runtime)

    // compileOnly "mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}"
    // runtimeOnly "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"
    // implementation "curse.maven:jade-324717:${jade_id}"
    // implementation "curse.maven:curios-309927:${curiosapi_id}"
    // implementation "org.sinytra.forgified-fabric-api:forgified-fabric-api:${forgified_fabric_api_version}"
    // implementation "curse.maven:playeranimator-658587:${playeranimator_id}"
    // implementation "curse.maven:patchouli-306770:${patchouli_id}"
    // compileOnly("curse.maven:patchouli-306770:${patchouli_id}")
    // implementation "com.github.glitchfiend:TerraBlender-neoforge:1.21.1-4.1.0.8"
    // implementation "software.bernie.geckolib:geckolib-neoforge-${minecraft_version}:${geckolib_id}"
    // compileOnly "io.wispforest:owo-lib-neoforge:${owo_version}"
    interfaceInjectionData(libs.owo)

    // runtimeOnly "curse.maven:appleskin-248787:${appleskin_id}"
    // runtimeOnly "curse.maven:auth-me-356643:6177873"
    // runtimeOnly "curse.maven:xaeros-world-map-317780:6538359"
    // runtimeOnly "curse.maven:xaeros-minimap-263420:6515043"
    // runtimeOnly "curse.maven:advancements-reloaded-1113876:5835520"
    // runtimeOnly "curse.maven:cloth-config-348521:5729127"

    // runtimeOnly "maven.modrinth:miragefairy2024-kakera-unofficial:royW33Zn"
    // runtimeOnly "maven.modrinth:architectury-api:ZxYGwlk0"
    // runtimeOnly "maven.modrinth:kotlin-for-forge:4qCjWixP"
    // runtimeOnly "maven.modrinth:owo-lib:NMCHU6DZ"
    // runtimeOnly "maven.modrinth:cloth-config:izKINKFg"

    // runtimeOnly("curse.maven:supplementaries-412082:6854370")
    // runtimeOnly("curse.maven:selene-499980:6818413")
    // runtimeOnly("curse.maven:cloth-config-348521:5729127")
    // runtimeOnly("curse.maven:create-328085:6641610")
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}
// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
neoForge.ideSyncTask generateModMetadata

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven { url = "file://${project.projectDir}/repo" }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

spotless {
    java {
        googleJavaFormat("1.28.0").aosp().reflowLongStrings()
        formatAnnotations() // アノテーションの整理
        importOrder("java", "javax", "net", "org", "com") // インポート順の整理
        removeUnusedImports() // 未使用インポートの削除
        trimTrailingWhitespace() // 行末の空白削除
        endWithNewline() // ファイル末尾に改行を追加
    }
}
